buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.flywaydb:flyway-database-postgresql:11.2.0")
  }
}


plugins {
  id 'scala'
  id 'application'
  id 'jvm-test-suite'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.flywaydb.flyway' version '11.2.0'
  id 'org.springframework.boot' version '3.2.5'
  id 'org.owasp.dependencycheck' version '12.0.1'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.0.1.5171'
  id 'io.gatling.gradle' version '3.13.3.2'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

pmd {
  toolVersion = "6.55.0"
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

checkstyle {
  toolVersion = '10.21.0'
  configFile = new File(rootDir, "checkstyle.xml")
  maxWarnings = 0
}

ext {
  lombokVersion = '1.18.36'
}

testing {
  suites {
    configureEach {
      useJUnitJupiter()

      dependencies {
        implementation 'io.rest-assured:rest-assured'
        implementation 'org.slf4j:slf4j-api'
      }
    }

    withType(JvmTestSuite).matching { it.name in ['smoke', 'functional'] }.configureEach {
      sources {
        java {
          srcDirs = ['src/functional/java']
        }
      }
    }

    smoke(JvmTestSuite) {
      dependencies {
        implementation project()
      }

      targets {
        all {
          testTask.configure {
            options {
              includeTags 'SmokeTest'
            }
          }
        }
      }
    }

    functional(JvmTestSuite) {
      testType = TestSuiteType.FUNCTIONAL_TEST

      dependencies {
        implementation project()
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

dependencyManagement {
    dependencies {

        //CVE-2022-25857, CVE-2022-38749, CVE-2022-38750, CVE-2022-38751, CVE-2022-38752, CVE-2022-41854
        dependencySet(group: 'org.yaml', version: '2.3') {
            entry 'snakeyaml'
        }
    }
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

tasks.named('sonarqube') {
  dependsOn jacocoTestReport
}

tasks.named('sonar') {
  dependsOn jacocoTestReport
}

sonarqube {
  properties {
    property "sonar.projectName", "sds-toffee-recipes-service"
    property "sonar.projectKey", "sds-toffee-recipes-service"
    property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    property "sonar.coverage.exclusions", "**/config/**, **Exception**"
  }
}

dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group == 'ch.qos.logback') {
        details.useVersion '1.4.14'
      }
    }
  }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.5'

  implementation group: 'org.flywaydb', name: 'flyway-core', version: '11.2.0'
  implementation group: 'org.flywaydb', name: 'flyway-database-postgresql', version: '11.2.0'

  implementation group: 'com.google.guava', name: 'guava', version: '33.4.0-jre'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.7'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'com.typesafe', name: 'config', version: '1.4.3'
  testImplementation "org.testcontainers:junit-jupiter:1.20.4"
  testImplementation "org.testcontainers:postgresql:1.20.4"
}

application {
  mainClass.set('uk.gov.hmcts.reform.rhubarb.recipes.Application')
}

bootJar {
  archiveFileName = 'sds-toffee-recipes-service.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

sourceSets {
  functional {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functional/java')
    }
    resources.srcDir file('src/functional/resources')
  }
}

task highLevelDataSetup {
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
